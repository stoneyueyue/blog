(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{409:function(t,e,n){"use strict";n.r(e);var a=n(56),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"eventtarget"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventtarget"}},[t._v("#")]),t._v(" EventTarget")]),t._v(" "),n("p",[n("code",[t._v("EventTarget")]),t._v("是一个DOM接口，由可以接收事件、并且可以创建、移除侦听器的对象实现。")]),t._v(" "),n("p",[t._v("常见的"),n("code",[t._v("EventTarget")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("window")])]),t._v(" "),n("li",[n("code",[t._v("document")])]),t._v(" "),n("li",[n("code",[t._v("Element")])]),t._v(" "),n("li",[n("code",[t._v("XMLHttpRequest")])])]),t._v(" "),n("h2",{attrs:{id:"实例方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[t._v("#")]),t._v(" 实例方法")]),t._v(" "),n("h3",{attrs:{id:"eventtarget-addeventlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventtarget-addeventlistener"}},[t._v("#")]),t._v(" EventTarget.addEventListener")]),t._v(" "),n("p",[t._v("在EventTarget上注册特定事件类型的事件处理程序。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("\ntarget"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntarget"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useCapture"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" xhrEvent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nxhrEvent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options'"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("ul",[n("li",[n("code",[t._v("type")]),t._v(" 表示监听事件类型的字符串")]),t._v(" "),n("li",[n("code",[t._v("listener")]),t._v(" 当所监听的事件类型触发时，会接收到一个事件通知（实现了 Event 接口的对象）对象。listener 必须是一个实现了 "),n("code",[t._v("EventListener")]),t._v(" 接口的对象，或者是一个函数。")]),t._v(" "),n("li",[n("code",[t._v("options")]),t._v(" 可选参数，一个指定有关 listener 属性的可选参数对象。\n"),n("ul",[n("li",[n("code",[t._v("capture")]),t._v(" Boolean，表示listener会在该类型的事件捕获阶段传播到该 "),n("code",[t._v("EventTarget")]),t._v(" 时触发")]),t._v(" "),n("li",[n("code",[t._v("once")]),t._v(" Boolean，表示listener在添加之后最多只调用一次。如果是 true，listener会在其被调用之后自动移除。")]),t._v(" "),n("li",[n("code",[t._v("passive")]),t._v(" Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。")])])]),t._v(" "),n("li",[n("code",[t._v("useCapture")]),t._v(" 可选参数，Boolean，在DOM树中，注册了listener的元素， 是否要先于它下面的EventTarget，调用该listener。 当useCapture设为true时，沿着DOM树向上冒泡的事件，不会触发listener。当一个元素嵌套了另一个元素，并且两个元素都对同一事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。如果没有指定，useCapture默认为false。")])]),t._v(" "),n("h3",{attrs:{id:"eventtarget-removeeventlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventtarget-removeeventlistener"}},[t._v("#")]),t._v(" EventTarget.removeEventListener")]),t._v(" "),n("p",[t._v("EventTarget中删除事件侦听器。")]),t._v(" "),n("h3",{attrs:{id:"eventtarget-dispatchevent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventtarget-dispatchevent"}},[t._v("#")]),t._v(" EventTarget.dispatchEvent")]),t._v(" "),n("p",[t._v("将事件分派到此EventTarget。")])])}),[],!1,null,null,null);e.default=s.exports}}]);